{"version":3,"sources":["webpack:///./src/sections/Landing.tsx","webpack:///./src/sections/Features.tsx","webpack:///./src/sections/HowItWorks.tsx","webpack:///./src/sections/RoadMap.tsx","webpack:///./src/sections/Download.tsx","webpack:///./src/pages/index.tsx"],"names":["Landing","allMarkdownRemark","workTimePreviewLight","workTimePreviewDark","shortBreakPreviewLight","shortBreakPreviewDark","longBreakPreviewLight","longBreakPreviewDark","configPreviewLight","configPreviewDark","settingsPreviewLight","settingsPreviewDark","tasksPreviewLight","tasksPreviewDark","frontmatter","edges","node","useState","operatingSystem","setOperatingSystem","isDarkMode","useContext","ThemeContext","useEffect","timeout","setTimeout","detectOS","clearTimeout","id","title","subTitle","as","href","WINDOWS_INSTALLER","name","MAC_INSTALLER","to","offset","duration","smooth","renderDownloadButton","fluid","childImageSharp","alt","Features","limit","setLimit","frontMatter","featureList","map","feature","index","key","icon","heading","description","slice","length","onClick","prevLimit","spy","HowItWorks","stepList","step","RoadMap","splice","Download","DEB_INSTALLER","APP_IMAGE_INSTALLER","RPM_INSTALLER","includeSchema"],"mappings":"q05BAqTeA,EAhRW,WAAM,aAE5BC,EAF4B,EAE5BA,kBACAC,EAH4B,EAG5BA,qBACAC,EAJ4B,EAI5BA,oBACAC,EAL4B,EAK5BA,uBACAC,EAN4B,EAM5BA,sBACAC,EAP4B,EAO5BA,sBACAC,EAR4B,EAQ5BA,qBACAC,EAT4B,EAS5BA,mBACAC,EAV4B,EAU5BA,kBACAC,EAX4B,EAW5BA,qBACAC,EAZ4B,EAY5BA,oBACAC,EAb4B,EAa5BA,kBACAC,EAd4B,EAc5BA,iBAwHMC,EAAgBb,EAAkBc,MAAM,GAAGC,KAA3CF,YAtIsB,EAwIgBG,mBAAkB,UAAzDC,EAxIuB,KAwINC,EAxIM,KA0ItBC,EAAeC,qBAAWC,KAA1BF,WAERG,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBN,EAAmBO,iBAClB,KAEH,OAAO,kBAAMC,aAAaH,MACzB,IA+CH,OACE,kBAAC,IAAD,CAAeI,GAAG,WAChB,kBAAC,IAAD,KACE,kBAAC,KAAD,MACA,kBAAC,KAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,4BAAKd,EAAYe,OACjB,2BAAIf,EAAYgB,WAGlB,kBAAC,IAAD,KAzDqB,WAC3B,OAAQZ,GACN,IAAK,UACH,OACE,kBAAC,IAAD,CAAgCa,GAAI,IAAKC,KAAMC,KAC7C,kBAAC,IAAD,CAAKC,KAAK,YADZ,wBAKJ,IAAK,QACH,OACE,kBAAC,IAAD,CAAgCH,GAAI,IAAKC,KAAMG,KAC7C,kBAAC,IAAD,CAAKD,KAAK,UADZ,uBAKJ,IAAK,QACH,OACE,kBAAC,IAAD,CACEF,KAAK,IACLI,GAAG,eACHC,QAAS,GACTC,SAAU,IACVC,QAAM,GAEN,kBAAC,IAAD,CAAKL,KAAK,QAPZ,yBAWJ,QACE,OACE,kBAAC,IAAD,CACEF,KAAK,IACLI,GAAG,eACHC,QAAS,GACTC,SAAU,IACVC,QAAM,GAEN,kBAAC,IAAD,CAAKL,KAAK,aAPZ,uBA2BGM,GACD,kBAAC,IAAD,CACET,GAAI,IACJC,KAAK,8DAEL,kBAAC,IAAD,CAAKE,KAAK,WAJZ,oBAUJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEO,MACErB,EACIP,EAAiB6B,gBAAgBD,MACjC7B,EAAkB8B,gBAAgBD,MAExCE,IAAI,kBAEN,kBAAC,IAAD,CACEF,MACErB,EACIT,EAAoB+B,gBAAgBD,MACpC/B,EAAqBgC,gBAAgBD,MAE3CE,IAAI,qBAEN,kBAAC,IAAD,CACEF,MACErB,EACIX,EAAkBiC,gBAAgBD,MAClCjC,EAAmBkC,gBAAgBD,MAEzCE,IAAI,mBAEN,kBAAC,IAAD,CACEF,MACErB,EACIjB,EAAoBuC,gBAAgBD,MACpCvC,EAAqBwC,gBAAgBD,MAE3CE,IAAI,sBAEN,kBAAC,IAAD,CACEF,MACErB,EACIf,EAAsBqC,gBAAgBD,MACtCrC,EAAuBsC,gBAAgBD,MAE7CE,IAAI,wBAEN,kBAAC,IAAD,CACEF,MACErB,EACIb,EAAqBmC,gBAAgBD,MACrCnC,EAAsBoC,gBAAgBD,MAE5CE,IAAI,2B,YC/MDC,EAlFY,WAAM,MACvB3C,EADuB,OACvBA,kBADuB,EAqBLgB,mBAAS,GAA5B4B,EArBwB,KAqBjBC,EArBiB,KAuBvBhC,EAAgBb,EAAkBc,MAAM,GAAGC,KAA3CF,YAmCR,OACE,kBAAC,IAAD,CAAgBc,GAAG,gBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQmB,YAAajC,IAErB,kBAAC,IAAD,eACGA,EAAYkC,mBADf,aACG,EACGC,KAAI,SAACC,EAASC,GAAV,OACJ,kBAAC,IAAD,CAAmBC,IAAKD,GACtB,4BACE,kBAAC,IAAD,CAAKjB,KAAMgB,EAAQG,OAClBH,EAAQI,SAEX,2BAAIJ,EAAQK,iBAGfC,MAAM,EAAGX,GAhDd/B,EAAYkC,aAAelC,EAAYkC,YAAYS,OAASZ,EAE5D,kBAAC,IAAD,CACEd,GAAI,SACJ2B,QAAS,WACPZ,GAAS,SAAAa,GAAS,OAAIA,EAAY,OAGpC,4BACE,kBAAC,IAAD,CAAKzB,KAAK,SADZ,iBAQJ,kBAAC,KAAD,CACEF,KAAK,IACLI,GAAG,WACHC,QAAS,GACTC,SAAU,IACVC,QAAM,EACNqB,KAAG,GAEH,4BACE,kBAAC,IAAD,CAAK1B,KAAK,SADZ,2B,YCTO2B,EA1Cc,WAAM,MAsBzB/C,EAtByB,OACzBb,kBAqBkCc,MAAM,GAAGC,KAA3CF,YAER,OACE,kBAAC,IAAD,CAAkBc,GAAG,gBACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQmB,YAAajC,IAErB,kBAAC,IAAD,eACGA,EAAYgD,gBADf,aACG,EAAsBb,KAAI,SAACc,EAAMZ,GAAP,OACzB,kBAAC,IAAD,CAAqBC,IAAKD,GACxB,4BAAKY,EAAKT,SACV,2BAAIS,EAAKR,qB,YCiDRS,EAjFW,WAAM,MACtB/D,EADsB,OACtBA,kBADsB,EAqBJgB,mBAAS,GAA5B4B,EArBuB,KAqBhBC,EArBgB,KAuBtBhC,EAAgBb,EAAkBc,MAAM,GAAGC,KAA3CF,YAkCR,OACE,kBAAC,IAAD,CAAec,GAAG,YAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQmB,YAAajC,IAErB,kBAAC,KAAD,eACGA,EAAYkC,mBADf,aACG,EACGC,KAAI,SAACC,EAASC,GAAV,OACJ,kBAAC,KAAD,CAAmBC,IAAKD,GACtB,4BACE,kBAAC,IAAD,CAAKjB,KAAMgB,EAAQG,OAClBH,EAAQI,SAEX,2BAAIJ,EAAQK,iBAGfU,OAAO,EAAGpB,GA/Cf/B,EAAYkC,aAAelC,EAAYkC,YAAYS,OAASZ,EAE5D,kBAAC,KAAD,CACEa,QAAS,WACPZ,GAAS,SAAAa,GAAS,OAAIA,EAAY,OAGpC,4BACE,kBAAC,IAAD,CAAKzB,KAAK,SADZ,iBAQJ,kBAAC,KAAD,CACEF,KAAK,IACLI,GAAG,WACHC,QAAS,GACTC,SAAU,IACVC,QAAM,EACNqB,KAAG,GAEH,4BACE,kBAAC,IAAD,CAAK1B,KAAK,SADZ,2B,YC6COgC,EAnFY,WAAM,IAgBvBpD,EAhBuB,OACvBb,kBAekCc,MAAM,GAAGC,KAA3CF,YAER,OACE,kBAAC,IAAD,CAAgBc,GAAG,gBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQmB,YAAajC,IAErB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKoB,KAAK,aAGZ,kBAAC,IAAD,CAAsBH,GAAI,IAAKC,KAAMC,KACnC,kBAAC,IAAD,CAAKC,KAAK,aADZ,wBAMF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKA,KAAK,WAGZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAsBH,GAAI,IAAKC,KAAMmC,KACnC,kBAAC,IAAD,CAAKjC,KAAK,aADZ,QAIA,kBAAC,IAAD,CAAsBH,GAAI,IAAKC,KAAMoC,KACnC,kBAAC,IAAD,CAAKlC,KAAK,aADZ,aAIA,kBAAC,IAAD,CAAsBH,GAAI,IAAKC,KAAMqC,KACnC,kBAAC,IAAD,CAAKnC,KAAK,aADZ,QAKA,oCAEA,kBAAC,IAAD,CACEN,GAAG,iBACHG,GAAI,IACJC,KAAK,2CAEL,wDACA,kBAAC,IAAD,CAAKE,KAAK,kBAKhB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKA,KAAK,WAGZ,kBAAC,IAAD,CAAsBH,GAAI,IAAKC,KAAMG,KACnC,kBAAC,IAAD,CAAKD,KAAK,aADZ,sBC3FG,4BACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKoC,eAAe,IACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S","file":"component---src-pages-index-tsx-03ebb5fcfdb1cad31671.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\n\r\nimport {\r\n  StyledLanding,\r\n  StyledWaterMarkLeft,\r\n  StyledWaterMarkRight,\r\n  StyledLandingCTAWrapper,\r\n  StyledAppPreviewWrapper,\r\n  StyledLandingContent,\r\n  StyledLandingCtaDownloadButton,\r\n  StyledLandingHeader,\r\n  StyledLandingCtaWrapper,\r\n  StyledLandingCtaGithubLink,\r\n  StyledAppPreviewImage,\r\n} from \"styles\";\r\nimport { FluidImageProps, MarkDownProps } from \"types\";\r\nimport { OSTypes, detectOS } from \"utils\";\r\nimport { WINDOWS_INSTALLER, MAC_INSTALLER } from \"configurations\";\r\nimport { ThemeContext } from \"contexts\";\r\nimport { SVG } from \"components\";\r\n\r\ntype QueryProps = {\r\n  workTimePreviewLight: FluidImageProps;\r\n  workTimePreviewDark: FluidImageProps;\r\n  shortBreakPreviewLight: FluidImageProps;\r\n  shortBreakPreviewDark: FluidImageProps;\r\n  longBreakPreviewLight: FluidImageProps;\r\n  longBreakPreviewDark: FluidImageProps;\r\n  configPreviewLight: FluidImageProps;\r\n  configPreviewDark: FluidImageProps;\r\n  settingsPreviewLight: FluidImageProps;\r\n  settingsPreviewDark: FluidImageProps;\r\n  tasksPreviewLight: FluidImageProps;\r\n  tasksPreviewDark: FluidImageProps;\r\n} & MarkDownProps;\r\n\r\nconst Landing: React.FC = () => {\r\n  const {\r\n    allMarkdownRemark,\r\n    workTimePreviewLight,\r\n    workTimePreviewDark,\r\n    shortBreakPreviewLight,\r\n    shortBreakPreviewDark,\r\n    longBreakPreviewLight,\r\n    longBreakPreviewDark,\r\n    configPreviewLight,\r\n    configPreviewDark,\r\n    settingsPreviewLight,\r\n    settingsPreviewDark,\r\n    tasksPreviewLight,\r\n    tasksPreviewDark,\r\n  } = useStaticQuery<QueryProps>(graphql`\r\n    {\r\n      allMarkdownRemark: allMarkdownRemark(\r\n        filter: { fileAbsolutePath: { regex: \"/hero/\" } }\r\n      ) {\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n              title\r\n              subTitle\r\n            }\r\n          }\r\n        }\r\n      }\r\n      workTimePreviewLight: file(relativePath: { eq: \"work-time-light.PNG\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 250, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      workTimePreviewDark: file(relativePath: { eq: \"work-time-dark.PNG\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 250, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      shortBreakPreviewLight: file(\r\n        relativePath: { eq: \"short-break-light.PNG\" }\r\n      ) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 220, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      shortBreakPreviewDark: file(\r\n        relativePath: { eq: \"short-break-dark.PNG\" }\r\n      ) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 220, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      longBreakPreviewLight: file(\r\n        relativePath: { eq: \"long-break-light.PNG\" }\r\n      ) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 200, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      longBreakPreviewDark: file(relativePath: { eq: \"long-break-dark.PNG\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 200, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      configPreviewLight: file(relativePath: { eq: \"config-light.PNG\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 250, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      configPreviewDark: file(relativePath: { eq: \"config-dark.PNG\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 250, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      settingsPreviewLight: file(relativePath: { eq: \"settings-light.PNG\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 220, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      settingsPreviewDark: file(relativePath: { eq: \"settings-dark.PNG\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 220, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      tasksPreviewLight: file(relativePath: { eq: \"tasks-light.PNG\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 200, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n      tasksPreviewDark: file(relativePath: { eq: \"tasks-dark.PNG\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 200, quality: 100) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const { frontmatter } = allMarkdownRemark.edges[0].node;\r\n\r\n  const [operatingSystem, setOperatingSystem] = useState<OSTypes>(\"Mobile\");\r\n\r\n  const { isDarkMode } = useContext(ThemeContext);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setOperatingSystem(detectOS());\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, []);\r\n\r\n  const renderDownloadButton = () => {\r\n    switch (operatingSystem) {\r\n      case \"Windows\":\r\n        return (\r\n          <StyledLandingCtaDownloadButton as={\"a\"} href={WINDOWS_INSTALLER}>\r\n            <SVG name=\"windows\" />\r\n            Download for Windows\r\n          </StyledLandingCtaDownloadButton>\r\n        );\r\n      case \"MacOS\":\r\n        return (\r\n          <StyledLandingCtaDownloadButton as={\"a\"} href={MAC_INSTALLER}>\r\n            <SVG name=\"apple\" />\r\n            Download for Mac OS\r\n          </StyledLandingCtaDownloadButton>\r\n        );\r\n      case \"Linux\":\r\n        return (\r\n          <StyledLandingCtaDownloadButton\r\n            href=\"/\"\r\n            to=\"download-now\"\r\n            offset={-24}\r\n            duration={420}\r\n            smooth\r\n          >\r\n            <SVG name=\"tux\" />\r\n            Download for Linux OS\r\n          </StyledLandingCtaDownloadButton>\r\n        );\r\n      default:\r\n        return (\r\n          <StyledLandingCtaDownloadButton\r\n            href=\"/\"\r\n            to=\"download-now\"\r\n            offset={-24}\r\n            duration={420}\r\n            smooth\r\n          >\r\n            <SVG name=\"download\" />\r\n            Download Installer\r\n          </StyledLandingCtaDownloadButton>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledLanding id=\"landing\">\r\n      <StyledLandingContent>\r\n        <StyledWaterMarkLeft />\r\n        <StyledWaterMarkRight />\r\n\r\n        <StyledLandingCTAWrapper>\r\n          <StyledLandingHeader>\r\n            <h1>{frontmatter.title}</h1>\r\n            <p>{frontmatter.subTitle}</p>\r\n          </StyledLandingHeader>\r\n\r\n          <StyledLandingCtaWrapper>\r\n            {renderDownloadButton()}\r\n            <StyledLandingCtaGithubLink\r\n              as={\"a\"}\r\n              href=\"https://github.com/roldanjrCodeArts9711/productivity-timer\"\r\n            >\r\n              <SVG name=\"github\" />\r\n              View on Github\r\n            </StyledLandingCtaGithubLink>\r\n          </StyledLandingCtaWrapper>\r\n        </StyledLandingCTAWrapper>\r\n\r\n        <StyledAppPreviewWrapper>\r\n          <StyledAppPreviewImage\r\n            fluid={\r\n              isDarkMode\r\n                ? tasksPreviewDark.childImageSharp.fluid\r\n                : tasksPreviewLight.childImageSharp.fluid\r\n            }\r\n            alt=\"tasks preview\"\r\n          />\r\n          <StyledAppPreviewImage\r\n            fluid={\r\n              isDarkMode\r\n                ? settingsPreviewDark.childImageSharp.fluid\r\n                : settingsPreviewLight.childImageSharp.fluid\r\n            }\r\n            alt=\"settings preview\"\r\n          />\r\n          <StyledAppPreviewImage\r\n            fluid={\r\n              isDarkMode\r\n                ? configPreviewDark.childImageSharp.fluid\r\n                : configPreviewLight.childImageSharp.fluid\r\n            }\r\n            alt=\"config preview\"\r\n          />\r\n          <StyledAppPreviewImage\r\n            fluid={\r\n              isDarkMode\r\n                ? workTimePreviewDark.childImageSharp.fluid\r\n                : workTimePreviewLight.childImageSharp.fluid\r\n            }\r\n            alt=\"work time preview\"\r\n          />\r\n          <StyledAppPreviewImage\r\n            fluid={\r\n              isDarkMode\r\n                ? shortBreakPreviewDark.childImageSharp.fluid\r\n                : shortBreakPreviewLight.childImageSharp.fluid\r\n            }\r\n            alt=\"short break preview\"\r\n          />\r\n          <StyledAppPreviewImage\r\n            fluid={\r\n              isDarkMode\r\n                ? longBreakPreviewDark.childImageSharp.fluid\r\n                : longBreakPreviewLight.childImageSharp.fluid\r\n            }\r\n            alt=\"long break preview\"\r\n          />\r\n        </StyledAppPreviewWrapper>\r\n      </StyledLandingContent>\r\n    </StyledLanding>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import React, { useState } from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport {\r\n  StyledFeatures,\r\n  StyledFeatureList,\r\n  StyledFeatureItem,\r\n  StyledShowMore,\r\n  StyledFeatureContent,\r\n} from \"styles\";\r\nimport { SVG, Header } from \"components\";\r\nimport { MarkDownProps } from \"types\";\r\n\r\nconst Features: React.FC = () => {\r\n  const { allMarkdownRemark } = useStaticQuery<MarkDownProps>(graphql`\r\n    {\r\n      allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/features/\" } }) {\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n              title\r\n              subTitle\r\n              featureList {\r\n                icon\r\n                heading\r\n                description\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const [limit, setLimit] = useState(5);\r\n\r\n  const { frontmatter } = allMarkdownRemark.edges[0].node;\r\n\r\n  const renderLastItem = () => {\r\n    if (frontmatter.featureList && frontmatter.featureList.length > limit) {\r\n      return (\r\n        <StyledFeatureItem\r\n          as={\"button\"}\r\n          onClick={() => {\r\n            setLimit(prevLimit => prevLimit + 6);\r\n          }}\r\n        >\r\n          <h3>\r\n            <SVG name=\"more\" />\r\n            Show more...\r\n          </h3>\r\n        </StyledFeatureItem>\r\n      );\r\n    }\r\n    return (\r\n      <StyledShowMore\r\n        href=\"/\"\r\n        to=\"road-map\"\r\n        offset={-24}\r\n        duration={420}\r\n        smooth\r\n        spy\r\n      >\r\n        <h3>\r\n          <SVG name=\"more\" />\r\n          More of it soon...\r\n        </h3>\r\n      </StyledShowMore>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <StyledFeatures id=\"app-features\">\r\n      <StyledFeatureContent>\r\n        <Header frontMatter={frontmatter} />\r\n\r\n        <StyledFeatureList>\r\n          {frontmatter.featureList\r\n            ?.map((feature, index) => (\r\n              <StyledFeatureItem key={index}>\r\n                <h3>\r\n                  <SVG name={feature.icon} />\r\n                  {feature.heading}\r\n                </h3>\r\n                <p>{feature.description}</p>\r\n              </StyledFeatureItem>\r\n            ))\r\n            .slice(0, limit)}\r\n          {renderLastItem()}\r\n        </StyledFeatureList>\r\n      </StyledFeatureContent>\r\n    </StyledFeatures>\r\n  );\r\n};\r\n\r\nexport default Features;\r\n","import React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport {\r\n  StyledHowItWorks,\r\n  StyledHowItWorkStepList,\r\n  StyledHowItWorkStep,\r\n  StyledFeatureContent,\r\n} from \"styles\";\r\nimport { MarkDownProps } from \"types\";\r\nimport { Header } from \"components\";\r\n\r\nconst HowItWorks: React.FC = () => {\r\n  const { allMarkdownRemark } = useStaticQuery<MarkDownProps>(graphql`\r\n    {\r\n      allMarkdownRemark(\r\n        filter: { fileAbsolutePath: { regex: \"/howItWorks/\" } }\r\n      ) {\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n              title\r\n              subTitle\r\n              stepList {\r\n                heading\r\n                description\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const { frontmatter } = allMarkdownRemark.edges[0].node;\r\n\r\n  return (\r\n    <StyledHowItWorks id=\"how-it-works\">\r\n      <StyledFeatureContent>\r\n        <Header frontMatter={frontmatter} />\r\n\r\n        <StyledHowItWorkStepList>\r\n          {frontmatter.stepList?.map((step, index) => (\r\n            <StyledHowItWorkStep key={index}>\r\n              <h4>{step.heading}</h4>\r\n              <p>{step.description}</p>\r\n            </StyledHowItWorkStep>\r\n          ))}\r\n        </StyledHowItWorkStepList>\r\n      </StyledFeatureContent>\r\n    </StyledHowItWorks>\r\n  );\r\n};\r\n\r\nexport default HowItWorks;\r\n","import React, { useState } from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport {\r\n  StyledRoadMap,\r\n  StyledRoadMapList,\r\n  StyledRoadMapItem,\r\n  StyledShowMore,\r\n  StyledRoadMapContent,\r\n} from \"styles\";\r\nimport { SVG, Header } from \"components\";\r\nimport { MarkDownProps } from \"types\";\r\n\r\nconst RoadMap: React.FC = () => {\r\n  const { allMarkdownRemark } = useStaticQuery<MarkDownProps>(graphql`\r\n    {\r\n      allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/roadMap/\" } }) {\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n              title\r\n              subTitle\r\n              featureList {\r\n                icon\r\n                heading\r\n                description\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const [limit, setLimit] = useState(5);\r\n\r\n  const { frontmatter } = allMarkdownRemark.edges[0].node;\r\n\r\n  const renderLastItem = () => {\r\n    if (frontmatter.featureList && frontmatter.featureList.length > limit) {\r\n      return (\r\n        <StyledRoadMapItem\r\n          onClick={() => {\r\n            setLimit(prevLimit => prevLimit + 5);\r\n          }}\r\n        >\r\n          <h3>\r\n            <SVG name=\"more\" />\r\n            Show more...\r\n          </h3>\r\n        </StyledRoadMapItem>\r\n      );\r\n    }\r\n    return (\r\n      <StyledShowMore\r\n        href=\"/\"\r\n        to=\"road-map\"\r\n        offset={-24}\r\n        duration={420}\r\n        smooth\r\n        spy\r\n      >\r\n        <h3>\r\n          <SVG name=\"more\" />\r\n          More of it soon...\r\n        </h3>\r\n      </StyledShowMore>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <StyledRoadMap id=\"road-map\">\r\n      <StyledRoadMapContent>\r\n        <Header frontMatter={frontmatter} />\r\n\r\n        <StyledRoadMapList>\r\n          {frontmatter.featureList\r\n            ?.map((feature, index) => (\r\n              <StyledRoadMapItem key={index}>\r\n                <h3>\r\n                  <SVG name={feature.icon} />\r\n                  {feature.heading}\r\n                </h3>\r\n                <p>{feature.description}</p>\r\n              </StyledRoadMapItem>\r\n            ))\r\n            .splice(0, limit)}\r\n          {renderLastItem()}\r\n        </StyledRoadMapList>\r\n      </StyledRoadMapContent>\r\n    </StyledRoadMap>\r\n  );\r\n};\r\n\r\nexport default RoadMap;\r\n","import React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport {\r\n  StyledDownload,\r\n  StyledDownloadButtonWrapper,\r\n  StyledDownloadForWindows,\r\n  StyledDownloadForLinux,\r\n  StyledDownloadForMac,\r\n  StyledDownloadOSLogo,\r\n  StyledDownloadButton,\r\n  StyledLinuxInstallerWrapper,\r\n  StyledDownloadContent,\r\n} from \"styles\";\r\nimport { MarkDownProps } from \"types\";\r\nimport { Header, SVG } from \"components\";\r\nimport {\r\n  WINDOWS_INSTALLER,\r\n  DEB_INSTALLER,\r\n  APP_IMAGE_INSTALLER,\r\n  RPM_INSTALLER,\r\n  MAC_INSTALLER,\r\n} from \"configurations\";\r\n\r\nconst Download: React.FC = () => {\r\n  const { allMarkdownRemark } = useStaticQuery<MarkDownProps>(graphql`\r\n    {\r\n      allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/download/\" } }) {\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n              title\r\n              subTitle\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const { frontmatter } = allMarkdownRemark.edges[0].node;\r\n\r\n  return (\r\n    <StyledDownload id=\"download-now\">\r\n      <StyledDownloadContent>\r\n        <Header frontMatter={frontmatter} />\r\n\r\n        <StyledDownloadButtonWrapper>\r\n          <StyledDownloadForWindows>\r\n            <StyledDownloadOSLogo>\r\n              <SVG name=\"windows\" />\r\n            </StyledDownloadOSLogo>\r\n\r\n            <StyledDownloadButton as={\"a\"} href={WINDOWS_INSTALLER}>\r\n              <SVG name=\"download\" />\r\n              Windows 7, 8 and 10\r\n            </StyledDownloadButton>\r\n          </StyledDownloadForWindows>\r\n\r\n          <StyledDownloadForLinux>\r\n            <StyledDownloadOSLogo>\r\n              <SVG name=\"linux\" />\r\n            </StyledDownloadOSLogo>\r\n\r\n            <StyledLinuxInstallerWrapper>\r\n              <StyledDownloadButton as={\"a\"} href={DEB_INSTALLER}>\r\n                <SVG name=\"download\" />\r\n                .deb\r\n              </StyledDownloadButton>\r\n              <StyledDownloadButton as={\"a\"} href={APP_IMAGE_INSTALLER}>\r\n                <SVG name=\"download\" />\r\n                .AppImage\r\n              </StyledDownloadButton>\r\n              <StyledDownloadButton as={\"a\"} href={RPM_INSTALLER}>\r\n                <SVG name=\"download\" />\r\n                .rpm\r\n              </StyledDownloadButton>\r\n\r\n              <span>Or</span>\r\n\r\n              <StyledDownloadButton\r\n                id=\"snap-store-btn\"\r\n                as={\"a\"}\r\n                href=\"https://snapcraft.io/productivity-timer\"\r\n              >\r\n                <span>Get it from Snap Store</span>\r\n                <SVG name=\"snap-store\" />\r\n              </StyledDownloadButton>\r\n            </StyledLinuxInstallerWrapper>\r\n          </StyledDownloadForLinux>\r\n\r\n          <StyledDownloadForMac>\r\n            <StyledDownloadOSLogo>\r\n              <SVG name=\"apple\" />\r\n            </StyledDownloadOSLogo>\r\n\r\n            <StyledDownloadButton as={\"a\"} href={MAC_INSTALLER}>\r\n              <SVG name=\"download\" />\r\n              Mac OS 10.10+\r\n            </StyledDownloadButton>\r\n          </StyledDownloadForMac>\r\n        </StyledDownloadButtonWrapper>\r\n      </StyledDownloadContent>\r\n    </StyledDownload>\r\n  );\r\n};\r\n\r\nexport default Download;\r\n","import React from \"react\";\r\nimport { SEO, Layout } from \"components\";\r\nimport { Landing, Features, HowItWorks, RoadMap, Download } from \"sections\";\r\n\r\nexport default () => (\r\n  <Layout>\r\n    <SEO includeSchema={false} />\r\n    <Landing />\r\n    <Features />\r\n    <HowItWorks />\r\n    <RoadMap />\r\n    <Download />\r\n  </Layout>\r\n);\r\n"],"sourceRoot":""}